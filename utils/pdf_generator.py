from fpdf import FPDF
import os
from datetime import datetime
import qrcode

class PDF(FPDF):
    def header(self):
        if os.path.exists("static/logo.png"):
            self.image("static/logo.png", 10, 8, 30)
        self.set_font("Helvetica", "B", 16)
        self.cell(0, 10, "Navadharma Report", ln=True, align="C")
        self.ln(10)

    def footer(self):
        self.set_y(-20)
        self.set_font("Helvetica", "I", 10)
        self.cell(0, 10, "— Nav, Principal Astrologer", ln=True, align="C")
        self.cell(0, 10, "Generated by Navadharma.com", align="C")

def generate_pdf(data: dict, filename="report.pdf"):
    pdf = PDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    def section(title):
        pdf.set_font("Helvetica", "B", 13)
        pdf.set_text_color(0)
        pdf.cell(0, 10, title, ln=True)
        pdf.set_font("Helvetica", "", 12)
        pdf.set_text_color(30, 30, 30)

    # Birth Info
    section("Birth Details")
    for k in ["name", "date", "time", "place"]:
        pdf.cell(0, 10, f"{k.capitalize()}: {data.get(k, '—')}", ln=True)
    pdf.ln(5)

    # Dasha & Lagna
    section("Current Dasha")
    dashas = data.get("currentDasha", {})
    pdf.cell(0, 10, f"Lagna: {data.get('lagna', '—')}", ln=True)
    pdf.cell(0, 10, f"Mahadasha: {dashas.get('mahadasha', '—')}", ln=True)
    pdf.cell(0, 10, f"Antardasha: {dashas.get('antardasha', '—')}", ln=True)
    pdf.cell(0, 10, f"Period: {dashas.get('period', '—')}", ln=True)

    # GPT Summary
    section("Astrological Insights")
    summary = data.get("predictions", {}).get("summary", "—")
    pdf.multi_cell(0, 8, summary)

    # Transit section if available
    if "transit" in data:
        section("Planetary Transits")
        for planet, pos in data["transit"].items():
            pdf.cell(0, 8, f"{planet}: {pos}", ln=True)

    # QR Code
    qr = qrcode.make("https://navadharma.com")
    qr_path = "static/nav_qr.png"
    qr.save(qr_path)
    pdf.image(qr_path, x=160, y=pdf.get_y(), w=30)

    out_path = f"static/{filename}"
    pdf.output(out_path, "F")
    return out_path

def generate_match_pdf(p1, p2, analysis, gpt_summary, filename="match_report.pdf"):
    pdf = PDF()
    pdf.add_page()

    def section(title):
        pdf.set_font("Helvetica", "B", 13)
        pdf.cell(0, 10, title, ln=True)
        pdf.set_font("Helvetica", "", 12)

    section("Partner 1")
    for k, v in p1.items():
        pdf.cell(0, 8, f"{k.capitalize()}: {v}", ln=True)

    section("Partner 2")
    for k, v in p2.items():
        pdf.cell(0, 8, f"{k.capitalize()}: {v}", ln=True)

    section("Compatibility Summary")
    for k, v in analysis.items():
        pdf.multi_cell(0, 8, f"{k}: {v}")

    section("GPT Astrological Insights")
    pdf.multi_cell(0, 8, gpt_summary.get("summary", "—"))

    out_path = f"static/{filename}"
    pdf.output(out_path, "F")
    return out_path
