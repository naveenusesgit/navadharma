from fpdf import FPDF
import os
import qrcode

class PDF(FPDF):
    def header(self):
        if os.path.exists("static/logo.png"):
            self.image("static/logo.png", 10, 8, 30)
        self.set_font("Helvetica", "B", 16)
        self.cell(0, 10, "Navadharma Report", ln=True, align="C")
        self.ln(10)

    def footer(self):
        self.set_y(-20)
        self.set_font("Helvetica", "I", 10)
        self.cell(0, 10, "â€” Nav, Principal Astrologer", ln=True, align="C")
        self.cell(0, 10, "Generated by Navadharma.com", align="C")


def generate_pdf(data: dict, filename="report.pdf", remedies=None, language="en"):
    pdf = PDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    def section_title(title):
        pdf.set_font("Helvetica", "B", 13)
        pdf.set_text_color(0)
        pdf.cell(0, 10, title, ln=True)
        pdf.set_font("Helvetica", "", 12)
        pdf.set_text_color(30, 30, 30)

    pdf.set_font("Helvetica", "", 12)

    # Birth Details
    section_title("Birth Details")
    for key in ["date", "time", "place"]:
        pdf.cell(0, 10, f"{key.capitalize()}: {data.get(key, 'â€”')}", ln=True)
    pdf.ln(4)

    # Charts (birth/kp)
    for chart_key, title in [("birth_chart.png", "Birth Chart"), ("kp_chart.png", "KP Chart")]:
        chart_path = f"static/{chart_key}"
        if os.path.exists(chart_path):
            section_title(title)
            pdf.image(chart_path, w=100)
            pdf.ln(5)

    # Planetary Details
    if "planet_positions" in data:
        section_title("Planetary Positions")
        for planet, info in data["planet_positions"].items():
            pdf.cell(0, 8, f"{planet}: {info}", ln=True)

    # Nakshatras
    if "nakshatras" in data:
        section_title("Nakshatras")
        for planet, nak in data["nakshatras"].items():
            pdf.cell(0, 8, f"{planet}: {nak}", ln=True)

    # Yogas
    if "yogas" in data:
        section_title("Yogas Found")
        for yoga in data["yogas"]:
            pdf.cell(0, 8, f"- {yoga}", ln=True)

    # Dasha
    if "dasha" in data:
        section_title("Current Dasha")
        dash = data["dasha"]
        pdf.cell(0, 8, f"Mahadasha: {dash.get('mahadasha')} | Antardasha: {dash.get('antardasha')}", ln=True)

    # GPT Summary
    if "gpt_summary" in data:
        section_title("Summary")
        pdf.multi_cell(0, 8, data["gpt_summary"])
        pdf.ln(2)

    # Predictions
    if "predictions" in data:
        section_title("Predictions")
        for topic, content in data["predictions"].items():
            pdf.set_font("Helvetica", "B", 12)
            pdf.cell(0, 8, topic.capitalize(), ln=True)
            pdf.set_font("Helvetica", "", 12)
            for k, v in content.items():
                if k.lower() != "hidden":
                    pdf.multi_cell(0, 8, f"{k.capitalize()}: {v}")
            if content.get("hidden", False):
                pdf.set_text_color(150, 0, 0)
                pdf.cell(0, 8, "ðŸ‘‰ Full reading in Premium Report", ln=True)
                pdf.set_text_color(0)
            pdf.ln(3)

    # Remedies
    if remedies:
        section_title("Remedies")
        for remedy in remedies:
            title = remedy.get("title")
            content = remedy["remedy"].get(language, remedy["remedy"]["en"])
            pdf.set_font("Helvetica", "B", 12)
            pdf.cell(0, 8, f"{title}:", ln=True)
            pdf.set_font("Helvetica", "", 12)
            pdf.multi_cell(0, 8, content)
            pdf.ln(2)

    # Transit (if any)
    if "transit" in data:
        section_title("Current Transits")
        for planet, pos in data["transit"].items():
            pdf.cell(0, 8, f"{planet}: {pos}", ln=True)

    # Match Compatibility (if any)
    if "match_score" in data:
        section_title("Match Compatibility")
        pdf.cell(0, 8, f"Score: {data['match_score']} / 10", ln=True)
        pdf.multi_cell(0, 8, data.get("match_summary", ""))
        pdf.ln(2)

    # QR Code
    qr_data = "https://navadharma.com"
    qr = qrcode.make(qr_data)
    qr_path = "static/nav_qr.png"
    qr.save(qr_path)
    pdf.image(qr_path, x=160, y=pdf.get_y(), w=30)

    out_path = f"static/{filename}"
    pdf.output(out_path)
    return out_path
